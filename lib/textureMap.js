'use strict';

var sharp = require('sharp'),
    necessary = require('necessary');

var miscellaneousUtilities = necessary.miscellaneousUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    fileSystemUtilities = necessary.fileSystemUtilities,
    rc = miscellaneousUtilities.rc,
    whilst = asynchronousUtilities.whilst,
    readDirectory = fileSystemUtilities.readDirectory;


function png(textureDirectoryPath, overlayTextureSize, response) {
  var names = readDirectory(textureDirectoryPath),
      dimension = dimensionFromNames(names);

  createTextureMap(dimension, overlayTextureSize, function (buffer) {
    var context = {
      buffer: buffer,
      names: names,
      dimension: dimension,
      overlayTextureSize: overlayTextureSize,
      textureDirectoryPath: textureDirectoryPath
    };

    whilst(overlayCallback, function () {
      response.writeHead(200, { 'Content-Type': 'image/png; charset=utf-8' });

      var buffer = context.buffer;


      sharp(buffer).pipe(response);
    }, context);
  });
}

function json(textureDirectoryPath) {
  var names = readDirectory(textureDirectoryPath),
      dimension = dimensionFromNames(names),
      json = names.reduce(function (json, name, index) {
    var left = index % dimension / dimension,
        bottom = Math.floor(index / dimension) / dimension,
        width = 1 / dimension,
        height = 1 / dimension;

    json[name] = {
      left: left,
      bottom: bottom,
      width: width,
      height: height
    };

    return json;
  }, {});

  return json;
}

module.exports = {
  png: png,
  json: json
};

function createTextureMap(dimension, overlayTextureSize, callback) {
  var width = dimension * overlayTextureSize,
      height = dimension * overlayTextureSize,
      channels = 4,
      background = { r: 0, g: 0, b: 0, alpha: 0 },
      options = {
    width: width,
    height: height,
    channels: channels,
    background: background
  },
      textureMap = sharp({
    create: options ///
  });

  textureMap.png().toBuffer().then(function (buffer) {
    callback(buffer);
  });
}

function overlayCallback(next, done, context, index) {
  var names = context.names,
      buffer = context.buffer,
      dimension = context.dimension,
      overlayTextureSize = context.overlayTextureSize,
      textureDirectoryPath = context.textureDirectoryPath,
      namesLength = names.length,
      lastIndex = namesLength - 1;


  if (index > lastIndex) {
    done();

    return;
  }

  var name = names[index],
      path = textureDirectoryPath + '/' + name;

  resizeTexture(path, overlayTextureSize, function (resizedTextureBuffer) {
    var top = (dimension - 1 - Math.floor(index / dimension)) * overlayTextureSize,
        left = index % dimension * overlayTextureSize,
        options = {
      top: top,
      left: left
    };

    sharp(buffer).overlayWith(resizedTextureBuffer, options).toBuffer().then(function (buffer) {
      Object.assign(context, {
        buffer: buffer
      });

      next();
    });
  });
}

function resizeTexture(path, overlayTextureSize, callback) {
  var width = overlayTextureSize,
      ///
  height = overlayTextureSize; ///

  sharp(path).resize(width, height).toBuffer().then(function (buffer) {
    var resizedTextureBuffer = buffer; ///

    callback(resizedTextureBuffer);
  });
}

function dimensionFromNames(names) {
  var namesLength = names.length,
      dimension = Math.ceil(Math.sqrt(namesLength)); ///

  return dimension;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,