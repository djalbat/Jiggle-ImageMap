'use strict';

var sharp = require('sharp'),
    necessary = require('necessary');

var namesUtilities = require('./utilities/names');

var asynchronousUtilities = necessary.asynchronousUtilities,
    fileSystemUtilities = necessary.fileSystemUtilities,
    whilst = asynchronousUtilities.whilst,
    readDirectory = fileSystemUtilities.readDirectory,
    removeHiddenNames = namesUtilities.removeHiddenNames,
    dimensionFromNames = namesUtilities.dimensionFromNames;


function imageMapPNG(names, imageDirectoryPath, overlayImageSize, response) {
  var namesLength = names.length;

  if (namesLength === 0) {
    names = readDirectory(imageDirectoryPath);
  }

  names = removeHiddenNames(names);

  var dimension = dimensionFromNames(names);

  createImageMap(dimension, overlayImageSize, function (imageBuffer) {
    var context = {
      names: names,
      dimension: dimension,
      imageBuffer: imageBuffer,
      overlayImageSize: overlayImageSize,
      imageDirectoryPath: imageDirectoryPath
    };

    whilst(overlayCallback, function () {
      response.writeHead(200, { 'Content-Type': 'image/png; charset=utf-8' });

      var imageBuffer = context.imageBuffer;


      sharp(imageBuffer).pipe(response);
    }, context);
  });
}

module.exports = imageMapPNG;

function createImageMap(dimension, overlayImageSize, callback) {
  var width = dimension * overlayImageSize,
      height = dimension * overlayImageSize,
      alpha = 0,
      channels = 4,
      r = 0,
      g = 0,
      b = 0,
      background = {
    r: r,
    g: g,
    b: b,
    alpha: alpha
  },
      options = {
    width: width,
    height: height,
    channels: channels,
    background: background
  },
      create = options,
      ///
  imageMap = sharp({
    create: create
  });

  imageMap.png().toBuffer().then(function (imageBuffer) {
    callback(imageBuffer);
  });
}

function overlayCallback(next, done, context, index) {
  var names = context.names,
      dimension = context.dimension,
      imageBuffer = context.imageBuffer,
      overlayImageSize = context.overlayImageSize,
      imageDirectoryPath = context.imageDirectoryPath,
      namesLength = names.length,
      lastIndex = namesLength - 1;


  if (index > lastIndex) {
    done();

    return;
  }

  var name = names[index],
      path = imageDirectoryPath + '/' + name;

  resizeImage(path, overlayImageSize, function (resizedImageBuffer) {
    var top = (dimension - 1 - Math.floor(index / dimension)) * overlayImageSize,
        left = index % dimension * overlayImageSize,
        options = {
      top: top,
      left: left
    };

    sharp(imageBuffer).overlayWith(resizedImageBuffer, options).toBuffer().then(function (imageBuffer) {
      Object.assign(context, {
        imageBuffer: imageBuffer
      });

      next();
    });
  });
}

function resizeImage(path, overlayImageSize, callback) {
  var width = overlayImageSize,
      ///
  height = overlayImageSize; ///

  sharp(path).resize(width, height).toBuffer().then(function (imageBuffer) {
    var resizedImageBuffer = imageBuffer; ///

    callback(resizedImageBuffer);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,