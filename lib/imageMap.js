'use strict';

var sharp = require('sharp'),
    necessary = require('necessary');

var miscellaneousUtilities = necessary.miscellaneousUtilities,
    asynchronousUtilities = necessary.asynchronousUtilities,
    fileSystemUtilities = necessary.fileSystemUtilities,
    rc = miscellaneousUtilities.rc,
    whilst = asynchronousUtilities.whilst,
    readDirectory = fileSystemUtilities.readDirectory;


function png(imageDirectoryPath, overlayImageSize, response) {
  var names = readDirectory(imageDirectoryPath),
      dimension = dimensionFromNames(names);

  createImageMap(dimension, overlayImageSize, function (buffer) {
    var context = {
      buffer: buffer,
      names: names,
      dimension: dimension,
      overlayImageSize: overlayImageSize,
      imageDirectoryPath: imageDirectoryPath
    };

    whilst(overlayCallback, function () {
      response.writeHead(200, { 'Content-Type': 'image/png; charset=utf-8' });

      var buffer = context.buffer;


      sharp(buffer).pipe(response);
    }, context);
  });
}

function json(imageDirectoryPath) {
  var names = readDirectory(imageDirectoryPath),
      dimension = dimensionFromNames(names),
      json = names.reduce(function (json, name, index) {
    var left = index % dimension / dimension,
        bottom = Math.floor(index / dimension) / dimension,
        width = 1 / dimension,
        height = 1 / dimension;

    json[name] = {
      left: left,
      bottom: bottom,
      width: width,
      height: height
    };

    return json;
  }, {});

  return json;
}

module.exports = {
  png: png,
  json: json
};

function createImageMap(dimension, overlayImageSize, callback) {
  var width = dimension * overlayImageSize,
      height = dimension * overlayImageSize,
      channels = 4,
      background = { r: 0, g: 0, b: 0, alpha: 0 },
      options = {
    width: width,
    height: height,
    channels: channels,
    background: background
  },
      imageMap = sharp({
    create: options ///
  });

  imageMap.png().toBuffer().then(function (buffer) {
    callback(buffer);
  });
}

function overlayCallback(next, done, context, index) {
  var names = context.names,
      buffer = context.buffer,
      dimension = context.dimension,
      overlayImageSize = context.overlayImageSize,
      imageDirectoryPath = context.imageDirectoryPath,
      namesLength = names.length,
      lastIndex = namesLength - 1;


  if (index > lastIndex) {
    done();

    return;
  }

  var name = names[index],
      path = imageDirectoryPath + '/' + name;

  resizeImage(path, overlayImageSize, function (resizedImageBuffer) {
    var top = (dimension - 1 - Math.floor(index / dimension)) * overlayImageSize,
        left = index % dimension * overlayImageSize,
        options = {
      top: top,
      left: left
    };

    sharp(buffer).overlayWith(resizedImageBuffer, options).toBuffer().then(function (buffer) {
      Object.assign(context, {
        buffer: buffer
      });

      next();
    });
  });
}

function resizeImage(path, overlayImageSize, callback) {
  var width = overlayImageSize,
      ///
  height = overlayImageSize; ///

  sharp(path).resize(width, height).toBuffer().then(function (buffer) {
    var resizedImageBuffer = buffer; ///

    callback(resizedImageBuffer);
  });
}

function dimensionFromNames(names) {
  var namesLength = names.length,
      dimension = Math.ceil(Math.sqrt(namesLength)); ///

  return dimension;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,