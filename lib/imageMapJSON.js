'use strict';

var necessary = require('necessary');

var namesUtilities = require('./utilities/names');

var fileSystemUtilities = necessary.fileSystemUtilities,
    readDirectory = fileSystemUtilities.readDirectory,
    removeHiddenNames = namesUtilities.removeHiddenNames,
    dimensionFromNames = namesUtilities.dimensionFromNames;


function imageMapJSON(names, imageDirectoryPath, overlayImageSize, callback) {
  var namesLength = names.length;

  if (namesLength === 0) {
    names = readDirectory(imageDirectoryPath);
  }

  names = removeHiddenNames(names);

  var dimension = dimensionFromNames(names),
      length = dimension * overlayImageSize,
      imageMapJSON = names.reduce(function (imageMapJSON, name, index) {
    var left = index % dimension / dimension,
        bottom = Math.floor(index / dimension) / dimension,
        width = 1 / dimension,
        height = 1 / dimension,
        offset = 1; ///

    left = (left * length + offset) / length; ///
    bottom = (bottom * length + offset) / length; ///
    width = (width * length - offset) / length; ///
    height = (height * length - offset) / length; ///

    imageMapJSON[name] = {
      left: left,
      bottom: bottom,
      width: width,
      height: height
    };

    return imageMapJSON;
  }, {});

  callback(imageMapJSON);
}

module.exports = imageMapJSON;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9pbWFnZU1hcEpTT04uanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIm5hbWVzVXRpbGl0aWVzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsInJlYWREaXJlY3RvcnkiLCJyZW1vdmVIaWRkZW5OYW1lcyIsImRpbWVuc2lvbkZyb21OYW1lcyIsImltYWdlTWFwSlNPTiIsIm5hbWVzIiwiaW1hZ2VEaXJlY3RvcnlQYXRoIiwib3ZlcmxheUltYWdlU2l6ZSIsImNhbGxiYWNrIiwibmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJkaW1lbnNpb24iLCJyZWR1Y2UiLCJuYW1lIiwiaW5kZXgiLCJsZWZ0IiwiYm90dG9tIiwiTWF0aCIsImZsb29yIiwid2lkdGgiLCJoZWlnaHQiLCJvZmZzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsaUJBQWlCRCxRQUFRLG1CQUFSLENBQXZCOztBQUVNLElBQUVFLG1CQUFGLEdBQTBCSCxTQUExQixDQUFFRyxtQkFBRjtBQUFBLElBQ0VDLGFBREYsR0FDb0JELG1CQURwQixDQUNFQyxhQURGO0FBQUEsSUFFRUMsaUJBRkYsR0FFNENILGNBRjVDLENBRUVHLGlCQUZGO0FBQUEsSUFFcUJDLGtCQUZyQixHQUU0Q0osY0FGNUMsQ0FFcUJJLGtCQUZyQjs7O0FBSU4sU0FBU0MsWUFBVCxDQUFzQkMsS0FBdEIsRUFBNkJDLGtCQUE3QixFQUFpREMsZ0JBQWpELEVBQW1FQyxRQUFuRSxFQUE2RTtBQUM1RSxNQUFNQyxjQUFjSixNQUFNSyxNQUExQjs7QUFFQSxNQUFJRCxnQkFBZ0IsQ0FBcEIsRUFBdUI7QUFDdEJKLFlBQVFKLGNBQWNLLGtCQUFkLENBQVI7QUFDQTs7QUFFREQsVUFBUUgsa0JBQWtCRyxLQUFsQixDQUFSOztBQUVBLE1BQU1NLFlBQVlSLG1CQUFtQkUsS0FBbkIsQ0FBbEI7QUFBQSxNQUNHSyxTQUFTQyxZQUFZSixnQkFEeEI7QUFBQSxNQUVHSCxlQUFlQyxNQUFNTyxNQUFOLENBQWEsVUFBU1IsWUFBVCxFQUF1QlMsSUFBdkIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQzFELFFBQUlDLE9BQVFELFFBQVFILFNBQVQsR0FBc0JBLFNBQWpDO0FBQUEsUUFDSEssU0FBU0MsS0FBS0MsS0FBTCxDQUFXSixRQUFRSCxTQUFuQixJQUFnQ0EsU0FEdEM7QUFBQSxRQUVIUSxRQUFRLElBQUlSLFNBRlQ7QUFBQSxRQUdIUyxTQUFTLElBQUlULFNBSFY7QUFBQSxRQUlJVSxTQUFTLENBSmIsQ0FEMEQsQ0FLMUM7O0FBRWhCTixXQUFPLENBQUVBLE9BQU9MLE1BQVIsR0FBa0JXLE1BQW5CLElBQTZCWCxNQUFwQyxDQVAwRCxDQU9kO0FBQ2pETSxhQUFTLENBQUVBLFNBQVNOLE1BQVYsR0FBb0JXLE1BQXJCLElBQStCWCxNQUF4QyxDQVIrRCxDQVFmO0FBQ2hEUyxZQUFRLENBQUVBLFFBQVFULE1BQVQsR0FBbUJXLE1BQXBCLElBQThCWCxNQUF0QyxDQVQrRCxDQVNqQjtBQUM5Q1UsYUFBUyxDQUFFQSxTQUFTVixNQUFWLEdBQW9CVyxNQUFyQixJQUErQlgsTUFBeEMsQ0FWK0QsQ0FVZjs7QUFFM0NOLGlCQUFhUyxJQUFiLElBQXFCO0FBQ25CRSxnQkFEbUI7QUFFbkJDLG9CQUZtQjtBQUduQkcsa0JBSG1CO0FBSW5CQztBQUptQixLQUFyQjs7QUFPQSxXQUFPaEIsWUFBUDtBQUNELEdBcEJVLEVBb0JSLEVBcEJRLENBRmxCOztBQXdCQ0ksV0FBU0osWUFBVDtBQUNEOztBQUVEa0IsT0FBT0MsT0FBUCxHQUFpQm5CLFlBQWpCIiwiZmlsZSI6ImltYWdlTWFwSlNPTi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IG5hbWVzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvbmFtZXMnKTtcblxuY29uc3QgeyBmaWxlU3lzdGVtVXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHJlYWREaXJlY3RvcnkgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXMsXG4gICAgICB7IHJlbW92ZUhpZGRlbk5hbWVzLCBkaW1lbnNpb25Gcm9tTmFtZXMgfSA9IG5hbWVzVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBpbWFnZU1hcEpTT04obmFtZXMsIGltYWdlRGlyZWN0b3J5UGF0aCwgb3ZlcmxheUltYWdlU2l6ZSwgY2FsbGJhY2spIHtcblx0Y29uc3QgbmFtZXNMZW5ndGggPSBuYW1lcy5sZW5ndGg7XG5cblx0aWYgKG5hbWVzTGVuZ3RoID09PSAwKSB7XG5cdFx0bmFtZXMgPSByZWFkRGlyZWN0b3J5KGltYWdlRGlyZWN0b3J5UGF0aCk7XG5cdH1cblxuXHRuYW1lcyA9IHJlbW92ZUhpZGRlbk5hbWVzKG5hbWVzKTtcblxuXHRjb25zdCBkaW1lbnNpb24gPSBkaW1lbnNpb25Gcm9tTmFtZXMobmFtZXMpLFxuXHRcdFx0XHRsZW5ndGggPSBkaW1lbnNpb24gKiBvdmVybGF5SW1hZ2VTaXplLFxuXHRcdFx0XHRpbWFnZU1hcEpTT04gPSBuYW1lcy5yZWR1Y2UoZnVuY3Rpb24oaW1hZ2VNYXBKU09OLCBuYW1lLCBpbmRleCkge1xuICAgICAgICAgIGxldCBsZWZ0ID0gKGluZGV4ICUgZGltZW5zaW9uKSAvIGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdFx0Ym90dG9tID0gTWF0aC5mbG9vcihpbmRleCAvIGRpbWVuc2lvbikgLyBkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRcdHdpZHRoID0gMSAvIGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdFx0aGVpZ2h0ID0gMSAvIGRpbWVuc2lvbixcbiAgICAgICAgICAgICAgb2Zmc2V0ID0gMTsgLy8vXG5cbiAgICAgICAgICBsZWZ0ID0gKChsZWZ0ICogbGVuZ3RoKSArIG9mZnNldCkgLyBsZW5ndGg7IC8vL1xuXHRcdFx0XHRcdGJvdHRvbSA9ICgoYm90dG9tICogbGVuZ3RoKSArIG9mZnNldCkgLyBsZW5ndGg7IC8vL1xuXHRcdFx0XHRcdHdpZHRoID0gKCh3aWR0aCAqIGxlbmd0aCkgLSBvZmZzZXQpIC8gbGVuZ3RoOyAvLy9cblx0XHRcdFx0XHRoZWlnaHQgPSAoKGhlaWdodCAqIGxlbmd0aCkgLSBvZmZzZXQpIC8gbGVuZ3RoOyAvLy9cblxuICAgICAgICAgIGltYWdlTWFwSlNPTltuYW1lXSA9IHtcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICBib3R0b20sXG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gaW1hZ2VNYXBKU09OO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIFxuICBjYWxsYmFjayhpbWFnZU1hcEpTT04pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGltYWdlTWFwSlNPTjtcbiJdfQ==