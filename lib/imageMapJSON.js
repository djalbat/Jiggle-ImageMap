'use strict';

var necessary = require('necessary');

var namesUtilities = require('./utilities/names');

var fileSystemUtilities = necessary.fileSystemUtilities,
    readDirectory = fileSystemUtilities.readDirectory,
    removeHiddenNames = namesUtilities.removeHiddenNames,
    dimensionFromNames = namesUtilities.dimensionFromNames;


function imageMapJSON(names, imageDirectoryPath, overlayImageSize, callback) {
  var namesLength = names.length;

  if (namesLength === 0) {
    names = readDirectory(imageDirectoryPath);
  }

  names = removeHiddenNames(names);

  var dimension = dimensionFromNames(names),
      size = dimension * overlayImageSize,
      imageMapJSON = names.reduce(function (imageMapJSON, name, index) {
    var left = index % dimension / dimension,
        bottom = Math.floor(index / dimension) / dimension,
        width = 1 / dimension,
        height = 1 / dimension;

    left = (left * size + 1) / size;
    bottom = (bottom * size + 1) / size;
    width = (width * size - 1) / size;
    height = (height * size - 1) / size;

    imageMapJSON[name] = {
      left: left,
      bottom: bottom,
      width: width,
      height: height
    };

    return imageMapJSON;
  }, {});

  callback(imageMapJSON);
}

module.exports = imageMapJSON;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9pbWFnZU1hcEpTT04uanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIm5hbWVzVXRpbGl0aWVzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsInJlYWREaXJlY3RvcnkiLCJyZW1vdmVIaWRkZW5OYW1lcyIsImRpbWVuc2lvbkZyb21OYW1lcyIsImltYWdlTWFwSlNPTiIsIm5hbWVzIiwiaW1hZ2VEaXJlY3RvcnlQYXRoIiwib3ZlcmxheUltYWdlU2l6ZSIsImNhbGxiYWNrIiwibmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJkaW1lbnNpb24iLCJzaXplIiwicmVkdWNlIiwibmFtZSIsImluZGV4IiwibGVmdCIsImJvdHRvbSIsIk1hdGgiLCJmbG9vciIsIndpZHRoIiwiaGVpZ2h0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxXQUFSLENBQWxCOztBQUVBLElBQU1DLGlCQUFpQkQsUUFBUSxtQkFBUixDQUF2Qjs7QUFFTSxJQUFFRSxtQkFBRixHQUEwQkgsU0FBMUIsQ0FBRUcsbUJBQUY7QUFBQSxJQUNFQyxhQURGLEdBQ29CRCxtQkFEcEIsQ0FDRUMsYUFERjtBQUFBLElBRUVDLGlCQUZGLEdBRTRDSCxjQUY1QyxDQUVFRyxpQkFGRjtBQUFBLElBRXFCQyxrQkFGckIsR0FFNENKLGNBRjVDLENBRXFCSSxrQkFGckI7OztBQUlOLFNBQVNDLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCQyxrQkFBN0IsRUFBaURDLGdCQUFqRCxFQUFtRUMsUUFBbkUsRUFBNkU7QUFDNUUsTUFBTUMsY0FBY0osTUFBTUssTUFBMUI7O0FBRUEsTUFBSUQsZ0JBQWdCLENBQXBCLEVBQXVCO0FBQ3RCSixZQUFRSixjQUFjSyxrQkFBZCxDQUFSO0FBQ0E7O0FBRURELFVBQVFILGtCQUFrQkcsS0FBbEIsQ0FBUjs7QUFFQSxNQUFNTSxZQUFZUixtQkFBbUJFLEtBQW5CLENBQWxCO0FBQUEsTUFDR08sT0FBT0QsWUFBWUosZ0JBRHRCO0FBQUEsTUFFR0gsZUFBZUMsTUFBTVEsTUFBTixDQUFhLFVBQVNULFlBQVQsRUFBdUJVLElBQXZCLEVBQTZCQyxLQUE3QixFQUFvQztBQUMxRCxRQUFJQyxPQUFRRCxRQUFRSixTQUFULEdBQXNCQSxTQUFqQztBQUFBLFFBQ0hNLFNBQVNDLEtBQUtDLEtBQUwsQ0FBV0osUUFBUUosU0FBbkIsSUFBZ0NBLFNBRHRDO0FBQUEsUUFFSFMsUUFBUSxJQUFJVCxTQUZUO0FBQUEsUUFHSFUsU0FBUyxJQUFJVixTQUhWOztBQUtBSyxXQUFPLENBQUVBLE9BQU9KLElBQVIsR0FBZ0IsQ0FBakIsSUFBc0JBLElBQTdCO0FBQ0xLLGFBQVMsQ0FBRUEsU0FBU0wsSUFBVixHQUFrQixDQUFuQixJQUF3QkEsSUFBakM7QUFDQVEsWUFBUSxDQUFFQSxRQUFRUixJQUFULEdBQWlCLENBQWxCLElBQXVCQSxJQUEvQjtBQUNBUyxhQUFTLENBQUVBLFNBQVNULElBQVYsR0FBa0IsQ0FBbkIsSUFBd0JBLElBQWpDOztBQUVLUixpQkFBYVUsSUFBYixJQUFxQjtBQUNuQkUsZ0JBRG1CO0FBRW5CQyxvQkFGbUI7QUFHbkJHLGtCQUhtQjtBQUluQkM7QUFKbUIsS0FBckI7O0FBT0EsV0FBT2pCLFlBQVA7QUFDRCxHQW5CVSxFQW1CUixFQW5CUSxDQUZsQjs7QUF1QkNJLFdBQVNKLFlBQVQ7QUFDRDs7QUFFRGtCLE9BQU9DLE9BQVAsR0FBaUJuQixZQUFqQiIsImZpbGUiOiJpbWFnZU1hcEpTT04uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBuYW1lc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL25hbWVzJyk7XG5cbmNvbnN0IHsgZmlsZVN5c3RlbVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyByZWFkRGlyZWN0b3J5IH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzLFxuICAgICAgeyByZW1vdmVIaWRkZW5OYW1lcywgZGltZW5zaW9uRnJvbU5hbWVzIH0gPSBuYW1lc1V0aWxpdGllcztcblxuZnVuY3Rpb24gaW1hZ2VNYXBKU09OKG5hbWVzLCBpbWFnZURpcmVjdG9yeVBhdGgsIG92ZXJsYXlJbWFnZVNpemUsIGNhbGxiYWNrKSB7XG5cdGNvbnN0IG5hbWVzTGVuZ3RoID0gbmFtZXMubGVuZ3RoO1xuXG5cdGlmIChuYW1lc0xlbmd0aCA9PT0gMCkge1xuXHRcdG5hbWVzID0gcmVhZERpcmVjdG9yeShpbWFnZURpcmVjdG9yeVBhdGgpO1xuXHR9XG5cblx0bmFtZXMgPSByZW1vdmVIaWRkZW5OYW1lcyhuYW1lcyk7XG5cblx0Y29uc3QgZGltZW5zaW9uID0gZGltZW5zaW9uRnJvbU5hbWVzKG5hbWVzKSxcblx0XHRcdFx0c2l6ZSA9IGRpbWVuc2lvbiAqIG92ZXJsYXlJbWFnZVNpemUsXG5cdFx0XHRcdGltYWdlTWFwSlNPTiA9IG5hbWVzLnJlZHVjZShmdW5jdGlvbihpbWFnZU1hcEpTT04sIG5hbWUsIGluZGV4KSB7XG4gICAgICAgICAgbGV0IGxlZnQgPSAoaW5kZXggJSBkaW1lbnNpb24pIC8gZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0XHRib3R0b20gPSBNYXRoLmZsb29yKGluZGV4IC8gZGltZW5zaW9uKSAvIGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdFx0d2lkdGggPSAxIC8gZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQgPSAxIC8gZGltZW5zaW9uO1xuXG4gICAgICAgICAgbGVmdCA9ICgobGVmdCAqIHNpemUpICsgMSkgLyBzaXplO1xuXHRcdFx0XHRcdGJvdHRvbSA9ICgoYm90dG9tICogc2l6ZSkgKyAxKSAvIHNpemU7XG5cdFx0XHRcdFx0d2lkdGggPSAoKHdpZHRoICogc2l6ZSkgLSAxKSAvIHNpemU7XG5cdFx0XHRcdFx0aGVpZ2h0ID0gKChoZWlnaHQgKiBzaXplKSAtIDEpIC8gc2l6ZTtcblxuICAgICAgICAgIGltYWdlTWFwSlNPTltuYW1lXSA9IHtcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICBib3R0b20sXG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gaW1hZ2VNYXBKU09OO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIFxuICBjYWxsYmFjayhpbWFnZU1hcEpTT04pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGltYWdlTWFwSlNPTjtcbiJdfQ==