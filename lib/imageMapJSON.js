'use strict';

var necessary = require('necessary');

var namesUtilities = require('./utilities/names');

var fileSystemUtilities = necessary.fileSystemUtilities,
    readDirectory = fileSystemUtilities.readDirectory,
    removeHiddenNames = namesUtilities.removeHiddenNames,
    dimensionFromNames = namesUtilities.dimensionFromNames;


function imageMapJSON(names, imageDirectoryPath, overlayImageSize, callback) {
  var namesLength = names.length;

  if (namesLength === 0) {
    names = readDirectory(imageDirectoryPath);
  }

  names = removeHiddenNames(names);

  var dimension = dimensionFromNames(names),
      length = dimension * overlayImageSize,
      imageMapJSON = names.reduce(function (imageMapJSON, name, index) {
    var left = index % dimension / dimension,
        bottom = Math.floor(index / dimension) / dimension,
        width = 1 / dimension,
        height = 1 / dimension,
        offset = 1; ///

    left = (left * length + offset) / length;
    bottom = (bottom * length + offset) / length;
    width = (width * length - offset) / length;
    height = (height * length - offset) / length;

    imageMapJSON[name] = {
      left: left,
      bottom: bottom,
      width: width,
      height: height
    };

    return imageMapJSON;
  }, {});

  callback(imageMapJSON);
}

module.exports = imageMapJSON;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9pbWFnZU1hcEpTT04uanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsIm5hbWVzVXRpbGl0aWVzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsInJlYWREaXJlY3RvcnkiLCJyZW1vdmVIaWRkZW5OYW1lcyIsImRpbWVuc2lvbkZyb21OYW1lcyIsImltYWdlTWFwSlNPTiIsIm5hbWVzIiwiaW1hZ2VEaXJlY3RvcnlQYXRoIiwib3ZlcmxheUltYWdlU2l6ZSIsImNhbGxiYWNrIiwibmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJkaW1lbnNpb24iLCJyZWR1Y2UiLCJuYW1lIiwiaW5kZXgiLCJsZWZ0IiwiYm90dG9tIiwiTWF0aCIsImZsb29yIiwid2lkdGgiLCJoZWlnaHQiLCJvZmZzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsaUJBQWlCRCxRQUFRLG1CQUFSLENBQXZCOztBQUVNLElBQUVFLG1CQUFGLEdBQTBCSCxTQUExQixDQUFFRyxtQkFBRjtBQUFBLElBQ0VDLGFBREYsR0FDb0JELG1CQURwQixDQUNFQyxhQURGO0FBQUEsSUFFRUMsaUJBRkYsR0FFNENILGNBRjVDLENBRUVHLGlCQUZGO0FBQUEsSUFFcUJDLGtCQUZyQixHQUU0Q0osY0FGNUMsQ0FFcUJJLGtCQUZyQjs7O0FBSU4sU0FBU0MsWUFBVCxDQUFzQkMsS0FBdEIsRUFBNkJDLGtCQUE3QixFQUFpREMsZ0JBQWpELEVBQW1FQyxRQUFuRSxFQUE2RTtBQUM1RSxNQUFNQyxjQUFjSixNQUFNSyxNQUExQjs7QUFFQSxNQUFJRCxnQkFBZ0IsQ0FBcEIsRUFBdUI7QUFDdEJKLFlBQVFKLGNBQWNLLGtCQUFkLENBQVI7QUFDQTs7QUFFREQsVUFBUUgsa0JBQWtCRyxLQUFsQixDQUFSOztBQUVBLE1BQU1NLFlBQVlSLG1CQUFtQkUsS0FBbkIsQ0FBbEI7QUFBQSxNQUNHSyxTQUFTQyxZQUFZSixnQkFEeEI7QUFBQSxNQUVHSCxlQUFlQyxNQUFNTyxNQUFOLENBQWEsVUFBU1IsWUFBVCxFQUF1QlMsSUFBdkIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQzFELFFBQUlDLE9BQVFELFFBQVFILFNBQVQsR0FBc0JBLFNBQWpDO0FBQUEsUUFDSEssU0FBU0MsS0FBS0MsS0FBTCxDQUFXSixRQUFRSCxTQUFuQixJQUFnQ0EsU0FEdEM7QUFBQSxRQUVIUSxRQUFRLElBQUlSLFNBRlQ7QUFBQSxRQUdIUyxTQUFTLElBQUlULFNBSFY7QUFBQSxRQUlJVSxTQUFTLENBSmIsQ0FEMEQsQ0FLMUM7O0FBRWhCTixXQUFPLENBQUVBLE9BQU9MLE1BQVIsR0FBa0JXLE1BQW5CLElBQTZCWCxNQUFwQztBQUNMTSxhQUFTLENBQUVBLFNBQVNOLE1BQVYsR0FBb0JXLE1BQXJCLElBQStCWCxNQUF4QztBQUNBUyxZQUFRLENBQUVBLFFBQVFULE1BQVQsR0FBbUJXLE1BQXBCLElBQThCWCxNQUF0QztBQUNBVSxhQUFTLENBQUVBLFNBQVNWLE1BQVYsR0FBb0JXLE1BQXJCLElBQStCWCxNQUF4Qzs7QUFFS04saUJBQWFTLElBQWIsSUFBcUI7QUFDbkJFLGdCQURtQjtBQUVuQkMsb0JBRm1CO0FBR25CRyxrQkFIbUI7QUFJbkJDO0FBSm1CLEtBQXJCOztBQU9BLFdBQU9oQixZQUFQO0FBQ0QsR0FwQlUsRUFvQlIsRUFwQlEsQ0FGbEI7O0FBd0JDSSxXQUFTSixZQUFUO0FBQ0Q7O0FBRURrQixPQUFPQyxPQUFQLEdBQWlCbkIsWUFBakIiLCJmaWxlIjoiaW1hZ2VNYXBKU09OLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgbmFtZXNVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3V0aWxpdGllcy9uYW1lcycpO1xuXG5jb25zdCB7IGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcmVhZERpcmVjdG9yeSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcyxcbiAgICAgIHsgcmVtb3ZlSGlkZGVuTmFtZXMsIGRpbWVuc2lvbkZyb21OYW1lcyB9ID0gbmFtZXNVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGltYWdlTWFwSlNPTihuYW1lcywgaW1hZ2VEaXJlY3RvcnlQYXRoLCBvdmVybGF5SW1hZ2VTaXplLCBjYWxsYmFjaykge1xuXHRjb25zdCBuYW1lc0xlbmd0aCA9IG5hbWVzLmxlbmd0aDtcblxuXHRpZiAobmFtZXNMZW5ndGggPT09IDApIHtcblx0XHRuYW1lcyA9IHJlYWREaXJlY3RvcnkoaW1hZ2VEaXJlY3RvcnlQYXRoKTtcblx0fVxuXG5cdG5hbWVzID0gcmVtb3ZlSGlkZGVuTmFtZXMobmFtZXMpO1xuXG5cdGNvbnN0IGRpbWVuc2lvbiA9IGRpbWVuc2lvbkZyb21OYW1lcyhuYW1lcyksXG5cdFx0XHRcdGxlbmd0aCA9IGRpbWVuc2lvbiAqIG92ZXJsYXlJbWFnZVNpemUsXG5cdFx0XHRcdGltYWdlTWFwSlNPTiA9IG5hbWVzLnJlZHVjZShmdW5jdGlvbihpbWFnZU1hcEpTT04sIG5hbWUsIGluZGV4KSB7XG4gICAgICAgICAgbGV0IGxlZnQgPSAoaW5kZXggJSBkaW1lbnNpb24pIC8gZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0XHRib3R0b20gPSBNYXRoLmZsb29yKGluZGV4IC8gZGltZW5zaW9uKSAvIGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdFx0d2lkdGggPSAxIC8gZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQgPSAxIC8gZGltZW5zaW9uLFxuICAgICAgICAgICAgICBvZmZzZXQgPSAxOyAvLy9cblxuICAgICAgICAgIGxlZnQgPSAoKGxlZnQgKiBsZW5ndGgpICsgb2Zmc2V0KSAvIGxlbmd0aDtcblx0XHRcdFx0XHRib3R0b20gPSAoKGJvdHRvbSAqIGxlbmd0aCkgKyBvZmZzZXQpIC8gbGVuZ3RoO1xuXHRcdFx0XHRcdHdpZHRoID0gKCh3aWR0aCAqIGxlbmd0aCkgLSBvZmZzZXQpIC8gbGVuZ3RoO1xuXHRcdFx0XHRcdGhlaWdodCA9ICgoaGVpZ2h0ICogbGVuZ3RoKSAtIG9mZnNldCkgLyBsZW5ndGg7XG5cbiAgICAgICAgICBpbWFnZU1hcEpTT05bbmFtZV0gPSB7XG4gICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgYm90dG9tLFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIGltYWdlTWFwSlNPTjtcbiAgICAgICAgfSwge30pO1xuICAgICAgICBcbiAgY2FsbGJhY2soaW1hZ2VNYXBKU09OKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbWFnZU1hcEpTT047XG4iXX0=